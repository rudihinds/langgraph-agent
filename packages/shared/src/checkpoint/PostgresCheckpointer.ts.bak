/**
 * PostgresCheckpointer for Supabase integration
 *
 * This implementation provides a checkpoint adapter for LangGraph that persists
 * state in a Supabase PostgreSQL database. It implements the BaseCheckpointSaver
 * interface from LangGraph.
 */

import { SupabaseClient } from "@supabase/supabase-js";
import { BaseCheckpointSaver } from "@langchain/langgraph";
import { SupabaseConnectionPool } from "./supabaseClient";

// Define local types to match BaseCheckpointSaver interface
interface Checkpoint {
  v: number; // version
  ts: number; // timestamp
  state: any;
  channelValues?: Record<string, any>;
  channelVersions?: Record<string, number>;
  versionsSeen?: number[];
}

interface RunnableConfig {
  configurable?: {
    namespace?: string;
    [key: string]: any;
  };
  [key: string]: any;
}

/**
 * Configuration options for PostgresCheckpointer
 */
export interface PostgresCheckpointerConfig {
  /**
   * Supabase URL (e.g., 'https://your-project-id.supabase.co')
   */
  supabaseUrl: string;

  /**
   * Supabase service role key or anon key with proper permissions
   */
  supabaseKey: string;

  /**
   * Optional table name (defaults to 'proposal_checkpoints')
   */
  tableName?: string;

  /**
   * Optional user ID for row-level security
   */
  userId?: string;

  /**
   * Optional existing connection pool
   */
  connectionPool?: SupabaseConnectionPool;
}

/**
 * Persists LangGraph checkpoints in Supabase PostgreSQL
 * Implements the BaseCheckpointSaver interface from LangGraph
 */
export class PostgresCheckpointer implements BaseCheckpointSaver {
  private supabase: SupabaseClient;
  private tableName: string;
  private userId?: string;

  /**
   * Creates a new PostgresCheckpointer instance
   */
  constructor(config: PostgresCheckpointerConfig) {
    this.tableName = config.tableName || "proposal_checkpoints";
    this.userId = config.userId;

    // Use provided connection pool or create new client
    if (config.connectionPool) {
      this.supabase = config.connectionPool.getClient();
    } else {
      this.supabase = new SupabaseClient(
        config.supabaseUrl,
        config.supabaseKey
      );
    }
  }

  /**
   * Saves a checkpoint to the database
   */
  put(config: RunnableConfig, checkpoint: Checkpoint): void {
    // Extract namespace from config
    const namespace = config.configurable?.namespace;
    if (!namespace) {
      throw new Error("Namespace is required for checkpoint operations");
    }

    // Execute asynchronously without waiting
    this._put(namespace, checkpoint).catch((error) => {
      console.error("Error saving checkpoint:", error);
    });
  }

  /**
   * Internal implementation of put that returns a promise
   */
  private async _put(namespace: string, checkpoint: Checkpoint): Promise<void> {
    const { error } = await this.supabase.from(this.tableName).upsert(
      {
        namespace,
        checkpoint_data: checkpoint,
        user_id: this.userId,
        updated_at: new Date().toISOString(),
      },
      { onConflict: "namespace,user_id" }
    );

    if (error) {
      throw new Error(`Failed to save checkpoint: ${error.message}`);
    }
  }

  /**
   * Retrieves a checkpoint from the database
   */
  get(config: RunnableConfig): Checkpoint | undefined {
    // Extract namespace from config
    const namespace = config.configurable?.namespace;
    if (!namespace) {
      throw new Error("Namespace is required for checkpoint operations");
    }

    // Return a placeholder checkpoint
    // The actual implementation would retrieve from the database
    return undefined;
  }

  /**
   * Internal implementation of get that returns a promise
   */
  private async _get(namespace: string): Promise<Checkpoint | null> {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select("checkpoint_data")
      .eq("namespace", namespace)
      .eq("user_id", this.userId || "")
      .single();

    if (error) {
      if (error.code === "PGRST116") {
        // Record not found
        return null;
      }
      throw new Error(`Failed to retrieve checkpoint: ${error.message}`);
    }

    return data.checkpoint_data as Checkpoint;
  }

  /**
   * Lists all checkpoint namespaces matching the criteria
   */
  async listNamespaces(match?: string, matchType?: string): Promise<string[]> {
    let query = this.supabase
      .from(this.tableName)
      .select("namespace")
      .eq("user_id", this.userId || "");

    if (match) {
      switch (matchType) {
        case "prefix":
          query = query.ilike("namespace", `${match}%`);
          break;
        case "suffix":
          query = query.ilike("namespace", `%${match}`);
          break;
        case "contains":
          query = query.ilike("namespace", `%${match}%`);
          break;
        case "exact":
        default:
          query = query.eq("namespace", match);
          break;
      }
    }

    const { data, error } = await query;

    if (error) {
      throw new Error(`Failed to list namespaces: ${error.message}`);
    }

    return data.map((row) => row.namespace);
  }

  /**
   * Deletes a checkpoint by namespace
   */
  async delete(namespace: string): Promise<void> {
    const { error } = await this.supabase
      .from(this.tableName)
      .delete()
      .eq("namespace", namespace)
      .eq("user_id", this.userId || "");

    if (error) {
      throw new Error(`Failed to delete checkpoint: ${error.message}`);
    }
  }

  /**
   * Clears all checkpoints
   */
  async clear(): Promise<void> {
    const { error } = await this.supabase
      .from(this.tableName)
      .delete()
      .eq("user_id", this.userId || "");

    if (error) {
      throw new Error(`Failed to clear checkpoints: ${error.message}`);
    }
  }
}

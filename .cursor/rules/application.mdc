---
description: 
globs: 
alwaysApply: true
---
# Proposal Agent Development Guidelines

These rules must be read and followed before executing any command or chat instruction.

## Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the architecture, goals, and dependencies.
- **Check `TASK.md`** before starting new work - if the task isn't listed, add it with a brief description and today's date.
- **Update task status** by marking completed items immediately after finishing them.
- **Add discovered sub-tasks** to `TASK.md` under a "Discovered During Work" section.
- **Maintain consistency** with the established agent flow patterns documented in the planning materials.

## Code Structure & Organization
- **Never create a file longer than 300 lines of code** - refactor by splitting into modules or helper files.
- **Follow a structured directory hierarchy**:
  - `/agents` - Main agent components and subgraphs
  - `/tools` - Tool implementations and utilities
  - `/state` - State definitions and reducers
  - `/api` - API routes and handlers
  - `/lib` - Shared utilities and helpers
  - `/ui` - UI components and pages
- **Organize subgraphs** in their own directories with a consistent pattern:
  - `index.ts` - Main export
  - `state.ts` - State definitions
  - `nodes.ts` - Node implementations
  - `tools.ts` - Specialized tools for this subgraph
- **Use clear, consistent imports** (prefer relative imports within packages).

## LangGraph Specific Patterns
- **Define state annotations** in dedicated `state.ts` files with comprehensive interfaces.
- **Document every node function** with JSDoc comments explaining:
  - Purpose and responsibility
  - Expected input state
  - Output state transformations
  - Potential errors
- **Name node functions descriptively** following the pattern `verbNoun` (e.g., `generateResearch`, `evaluateSection`).
- **Create clear boundaries between subgraphs** with documented interfaces.
- **Implement error handling for all LLM calls** using standardized patterns.

## State Management
- **Define explicit interfaces** for all state objects with JSDoc comments for each field.
- **Create dedicated reducer functions** for complex state updates in a `reducers.ts` file.
- **Use immutable patterns** for all state updates.
- **Implement checkpoint verification** to ensure proper persistence and recovery.
- **Document state transitions** between nodes with clear diagrams or comments.
- **Handle interrupts consistently** with proper error propagation and recovery logic.

## Tools & LLM Integration
- **Create a dedicated file for each tool** with standardized structure.
- **Keep prompt templates in separate files** organized by agent/subgraph.
- **Implement retry logic for all external API calls** with exponential backoff.
- **Cache expensive operations** where appropriate.
- **Log all LLM interactions** for debugging and optimization.
- **Validate all tool inputs and outputs** using Zod schemas.

## Testing & Quality Assurance
- **Create comprehensive tests for all agent components** using Jest and testing-library.
- **Tests should live in a `/tests` or `__tests__` directory** mirroring the main project structure.
- **For each node and tool, implement at minimum**:
  - 1 test for expected "happy path" behavior
  - 1 test for edge case scenarios (e.g., empty inputs, maximum context)
  - 1 test for failure handling (e.g., API errors, malformed responses)
- **Test state transformations explicitly** to verify the reducer functions work as expected.
- **Test full agent flows end-to-end** with mocked LLM responses.
- **Implement checkpoint verification tests** to ensure state is properly persisted and recovered.
- **For human-in-the-loop interactions**:
  - Test both approval and rejection paths
  - Verify feedback is properly incorporated into the state
  - Test recovery from interrupted states
- **After modifying any node logic**, check if existing tests need updating.
- **Test with realistic but diverse inputs** to ensure robust handling of various RFP types.
- **Mock external dependencies** (LLMs, Supabase, Pinecone) for consistent test results.
- **Verify proper error propagation** throughout the graph to ensure graceful failure handling.

## UI Implementation
- **Follow Next.js App Router patterns** with clear separation of concerns:
  - `/app` - Routes and page layout
  - `/components` - Reusable UI components
  - `/hooks` - Custom React hooks
- **Use Shadcn UI components** consistently for UI elements.
- **Create a design system** with standardized colors, spacing, and typography.
- **Implement responsive designs** with Tailwind's responsive classes.
- **Optimize loading states** with proper Suspense boundaries.
- **Minimize client-side JavaScript** by leveraging React Server Components.
- **Create specific UI components** for each interaction pattern to ensure consistency.

## Authentication & Data Security
- **Implement Supabase authentication** with Google OAuth consistently.
- **Create Row Level Security policies** for all database tables.
- **Validate all user inputs** using Zod schemas both client-side and server-side.
- **Sanitize all LLM outputs** before displaying to prevent XSS.
- **Implement proper authorization middleware** for all API routes.
- **Create specific types** for authenticated user context.
- **Never expose API keys** in client-side code.

## Documentation & Maintenance
- **Update `README.md`** when new features are added or setup steps change.
- **Document all state schemas** with clear explanations of each field's purpose.
- **Add inline comments** for complex logic with `// Reason:` prefix explaining the why, not just the what.
- **Maintain a changelog** in `CHANGELOG.md` using semantic versioning.
- **Document all prompt templates** with explanations of key parameters.
- **Create flow diagrams** for complex agent interactions.
- **Comment non-obvious code** thoroughly, especially around state transformations.

## Performance Considerations
- **Optimize state serialization** to minimize database storage requirements.
- **Implement appropriate caching** for:
  - LLM responses
  - Vector store queries
  - Research results
- **Use streaming responses** for all LLM interactions where appropriate.
- **Monitor and log performance metrics**:
  - LLM response times
  - Database query times
  - End-to-end flow completion times
- **Implement proper timeout handling** for long-running operations.
- **Use efficient database queries** with proper indexing.
- **Optimize the UI** for Core Web Vitals metrics (LCP, FID, CLS).

### State Management Optimization
- **Implement state pruning** to prevent memory bloat:
  - Use reducer functions to limit message history
  - Implement conversation summarization for long-running agents
  - Configure appropriate checkpointing strategies

### Runtime Performance
- **Optimize LLM interactions**:
  - Keep prompts concise and structured
  - Use appropriate streaming modes based on UI needs
  - Implement token limits and truncation
  - Cache expensive operations where appropriate

### Monitoring & Resilience
- **Track key metrics**:
  - LLM response times
  - State size growth
  - Token usage
  - Error rates
- **Implement circuit breakers** for external tool calls
- **Use appropriate timeout handling**

## AI Behavior Rules
- **Never assume missing context** - ask questions if uncertain about requirements.
- **Verify library and API compatibility** before implementing new features.
- **Never hallucinate features or capabilities** - stick to documented APIs.
- **Always confirm file paths and module names** before referencing them.
- **Respect the dependency order** for proposal section generation.
- **Test with realistic inputs** to ensure agents handle various scenarios.
- **Consider edge cases** in human-in-the-loop interactions.
- **Never delete existing code** unless explicitly instructed to or part of a documented task.